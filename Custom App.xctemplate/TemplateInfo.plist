<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>Ancestors</key>
	<array>
		<string>com.apple.dt.unit.coreDataCocoaTouchApplication</string>
		<string>com.apple.dt.unit.sceneLifecycleApplication</string>
	</array>
	<key>Concrete</key>
	<true/>
	<key>Description</key>
	<string>This template provides a starting point for an application that uses a single view. It provides a view controller to manage the view, and a storyboard or nib file that contains the view.</string>
	<key>Identifier</key>
	<string>com.verebesCustom.dt.unit.singleViewApplication</string>
	<key>Kind</key>
	<string>Xcode.Xcode3.ProjectTemplateUnitKind</string>
	<key>NameOfInitialFileForEditor</key>
	<string>ContentView.swift</string>
	<key>Options</key>
	<array>
		<dict>
			<key>Identifier</key>
			<string>languageChoice</string>
			<key>Units</key>
			<dict>
				<key>Objective-C</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>Base.lproj/Main.storyboard</key>
							<dict>
								<key>Path</key>
								<string>Main.storyboard</string>
								<key>SortOrder</key>
								<integer>98</integer>
							</dict>
							<key>Info.plist:UIMainStoryboardFile</key>
							<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
                            &lt;string&gt;Main&lt;/string&gt;
                        </string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>Base.lproj/Main.storyboard</string>
							<string>Info.plist:UIApplicationSceneManifest:UISceneStoryboardFile</string>
							<string>Info.plist:UIMainStoryboardFile</string>
							<string>ViewController.h:comments</string>
							<string>ViewController.h:imports:importCocoa</string>
							<string>ViewController.h:interface(___FILEBASENAME___ : UIViewController)</string>
							<string>ViewController.m:comments</string>
							<string>ViewController.m:imports:importHeader:ViewController.h</string>
							<string>ViewController.m:extension</string>
							<string>ViewController.m:implementation:methods:viewDidLoad(- (void\)viewDidLoad)</string>
							<string>ViewController.m:implementation:methods:viewDidLoad:super</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>Storyboard</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SupportingFiles/Assets.xcassets</key>
							<dict>
								<key>Group</key>
								<string>SupportingFiles</string>
								<key>Path</key>
								<string>SupportingFiles/Assets.xcassets</string>
								<key>SortOrder</key>
								<string>103</string>
							</dict>
							<key>SupportingFiles/LogoImageView.h</key>
							<dict>
								<key>Group</key>
								<string>SupportingFiles</string>
								<key>Path</key>
								<string>SupportingFiles/LogoImageView.h</string>
								<key>SortOrder</key>
								<string>102</string>
							</dict>
							<key>SupportingFiles/LogoImageView.m</key>
							<dict>
								<key>Group</key>
								<string>SupportingFiles</string>
								<key>Path</key>
								<string>SupportingFiles/LogoImageView.m</string>
								<key>SortOrder</key>
								<string>101</string>
							</dict>
							<key>___VARIABLE_rootClassName___.h:imports</key>
							<string>#import "SupportingFiles/LogoImageView.h"</string>
							<key>___VARIABLE_rootClassName___.m:implementation:methods</key>
							<string>- (void)viewDidLoad {
    [super viewDidLoad];
    // Do any additional setup after loading the view.
    self.view.backgroundColor = UIColor.darkGrayColor;
    LogoImageView *devSkillerLogo = LogoImageView.new;
    [self.view addSubview:devSkillerLogo];
    [devSkillerLogo setupLogo];
}</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>SupportingFiles/LogoImageView.m</string>
							<string>SupportingFiles/LogoImageView.h</string>
							<string>SupportingFiles/Assets.xcassets</string>
							<string>SceneDelegate.m:imports:importHeader:___VARIABLE_rootClassName___.h</string>
							<string>___VARIABLE_rootClassName___.h:comments</string>
							<string>___VARIABLE_rootClassName___.h:imports:importCocoa</string>
							<string>___VARIABLE_rootClassName___.h:interface(___FILEBASENAME___ : UIViewController)</string>
							<string>___VARIABLE_rootClassName___.m:comments</string>
							<string>___VARIABLE_rootClassName___.m:imports:importHeader:___VARIABLE_rootClassName___.h</string>
							<string>___VARIABLE_rootClassName___.m:extension</string>
							<string>___VARIABLE_rootClassName___.m:implementation:methods</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>Programmatic-UIKit</string>
						</dict>
					</dict>
				</array>
				<key>Swift</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>Base.lproj/Main.storyboard</key>
							<dict>
								<key>Path</key>
								<string>Main.storyboard</string>
								<key>SortOrder</key>
								<integer>98</integer>
							</dict>
							<key>Info.plist:UIMainStoryboardFile</key>
							<string>&lt;key&gt;UIMainStoryboardFile&lt;/key&gt;
                            &lt;string&gt;Main&lt;/string&gt;
                        </string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>Base.lproj/Main.storyboard</string>
							<string>Info.plist:UIApplicationSceneManifest:UISceneStoryboardFile</string>
							<string>Info.plist:UIMainStoryboardFile</string>
							<string>ViewController.swift:comments</string>
							<string>ViewController.swift:imports:importCocoa</string>
							<string>ViewController.swift:implementation(___FILEBASENAME___: UIViewController)</string>
							<string>ViewController.swift:implementation:methods:viewDidLoad(override func viewDidLoad(\))</string>
							<string>ViewController.swift:implementation:methods:viewDidLoad:super</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>Storyboard</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SupportingFiles/Assets.xcassets</key>
							<dict>
								<key>Group</key>
								<string>SupportingFiles</string>
								<key>Path</key>
								<string>SupportingFiles/Assets.xcassets</string>
								<key>SortOrder</key>
								<string>102</string>
							</dict>
							<key>SupportingFiles/LogoImageView.swift</key>
							<dict>
								<key>Group</key>
								<string>SupportingFiles</string>
								<key>Path</key>
								<string>SupportingFiles/LogoImageView.swift</string>
								<key>SortOrder</key>
								<string>101</string>
							</dict>
							<key>___VARIABLE_rootClassName___.swift:implementation:methods</key>
							<string>let logoImage = LogoImageView()

override func viewDidLoad() {
    super.viewDidLoad()
    view.backgroundColor = .darkGray
    view.addSubview(logoImage)
    logoImage.setupLogo()
}</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>SupportingFiles/LogoImageView.swift</string>
							<string>SupportingFiles/Assets.xcassets</string>
							<string>___VARIABLE_rootClassName___.swift:comments</string>
							<string>___VARIABLE_rootClassName___.swift:imports:importCocoa</string>
							<string>___VARIABLE_rootClassName___.swift:implementation(___FILEBASENAME___: UIViewController)</string>
							<string>___VARIABLE_rootClassName___.swift:implementation:methods</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>Programmatic-UIKit</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>*:imports:importSwiftUI</key>
							<string>import SwiftUI</string>
							<key>ContentView.swift</key>
							<dict>
								<key>Path</key>
								<string>ContentView.swift</string>
								<key>SortOrder</key>
								<integer>99</integer>
							</dict>
							<key>Preview Content/Preview Assets.xcassets</key>
							<dict>
								<key>Group</key>
								<string>Preview Content</string>
								<key>Path</key>
								<string>Preview Assets.xcassets</string>
								<key>SortOrder</key>
								<integer>100</integer>
							</dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>
// Create the SwiftUI view that provides the window contents.
let contentView = ContentView()
</string>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body:windowScene</key>
							<string>
// Use a UIHostingController as window root view controller.
if let windowScene = scene as? UIWindowScene {
    let window = UIWindow(windowScene: windowScene)
    window.rootViewController = UIHostingController(rootView: contentView)
    self.window = window
    window.makeKeyAndVisible()
}</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>ContentView.swift</string>
							<string>Preview Content/Preview Assets.xcassets</string>
							<string>SceneDelegate.swift:imports:importSwiftUI</string>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</string>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body:windowScene</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>userInterface</key>
							<string>SwiftUI</string>
						</dict>
						<key>Targets</key>
						<array>
							<dict>
								<key>SharedSettings</key>
								<dict>
									<key>DEVELOPMENT_ASSET_PATHS</key>
									<string>___PACKAGENAMEPREVIEWCONTENT:quoteIfNeeded___</string>
									<key>ENABLE_PREVIEWS</key>
									<string>YES</string>
								</dict>
							</dict>
						</array>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>
// Get the managed object context from the shared persistent container.
let context = (UIApplication.shared.delegate as! AppDelegate).persistentContainer.viewContext

// Create the SwiftUI view and set the context as the value for the managedObjectContext environment keyPath.
// Add `@Environment(\.managedObjectContext)` in the views that will need the context.
let contentView = ContentView().environment(\.managedObjectContext, context)
</string>
						</dict>
						<key>Nodes</key>
						<array>
							<string>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</string>
						</array>
						<key>RequiredOptions</key>
						<dict>
							<key>coreData</key>
							<string>true</string>
							<key>userInterface</key>
							<string>SwiftUI</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
		<dict>
			<key>Default</key>
			<string>SwiftUI</string>
			<key>Description</key>
			<string>The type of user interface.</string>
			<key>Identifier</key>
			<string>userInterface</string>
			<key>Name</key>
			<string>User Interface:</string>
			<key>RequiredOptionsForValues</key>
			<dict>
				<key>SwiftUI</key>
				<dict>
					<key>languageChoice</key>
					<string>Swift</string>
				</dict>
			</dict>
			<key>Type</key>
			<string>popup</string>
			<key>Values</key>
			<array>
				<string>Programmatic-UIKit</string>
				<string>Storyboard</string>
				<string>SwiftUI</string>
			</array>
		</dict>
		<dict>
			<key>Default</key>
			<string>ViewController</string>
			<key>Description</key>
			<string>Class name of root view controller</string>
			<key>Identifier</key>
			<string>rootClassName</string>
			<key>Name</key>
			<string>Root View Controller Class:</string>
			<key>Required</key>
			<true/>
			<key>RequiredOptions</key>
			<dict>
				<key>userInterface</key>
				<string>Programmatic-UIKit</string>
			</dict>
			<key>Type</key>
			<string>text</string>
		</dict>
		<dict>
			<key>Default</key>
			<string>false</string>
			<key>Description</key>
			<string>Is the root view controller embedded in a navigation controller</string>
			<key>Identifier</key>
			<string>navigationController</string>
			<key>Name</key>
			<string>Embed in Navigation Controller</string>
			<key>RequiredOptions</key>
			<dict>
				<key>userInterface</key>
				<string>Programmatic-UIKit</string>
			</dict>
			<key>Type</key>
			<string>checkbox</string>
			<key>Units</key>
			<dict>
				<key>false</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.m:implementation:methods:sceneWillConnectToSession:body</key>
							<string>    UIWindowScene *windowScene = (UIWindowScene *) scene;
    self.window = [[UIWindow alloc] initWithFrame:windowScene.coordinateSpace.bounds];
    self.window.windowScene = windowScene;
    ___VARIABLE_rootClassName___ *rootViewController = [[___VARIABLE_rootClassName___ alloc] init];
    self.window.rootViewController = rootViewController;
    [self.window makeKeyAndVisible];</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Objective-C</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>        guard let windowScene = (scene as? UIWindowScene) else { return }
        window = UIWindow(frame: windowScene.coordinateSpace.bounds)
        window?.windowScene = windowScene
        window?.rootViewController = ___VARIABLE_rootClassName___(nibName: nil, bundle: nil)
        window?.makeKeyAndVisible()</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Swift</string>
						</dict>
					</dict>
				</array>
				<key>true</key>
				<array>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.m:implementation:methods:sceneWillConnectToSession:body</key>
							<string>    UIWindowScene *windowScene = (UIWindowScene *) scene;
    self.window = [[UIWindow alloc] initWithFrame:windowScene.coordinateSpace.bounds];
    self.window.windowScene = windowScene;
    ___VARIABLE_rootClassName___ *rootViewController = [[___VARIABLE_rootClassName___ alloc] init];
    UINavigationController *navigationController = [[UINavigationController alloc] initWithRootViewController:rootViewController];
    self.window.rootViewController = navigationController;
    [self.window makeKeyAndVisible];</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Objective-C</string>
						</dict>
					</dict>
					<dict>
						<key>Definitions</key>
						<dict>
							<key>SceneDelegate.swift:implementation:methods:sceneWillConnectToSession:body</key>
							<string>guard let windowScene = (scene as? UIWindowScene) else { return }
window = UIWindow(frame: windowScene.coordinateSpace.bounds)
window?.windowScene = windowScene
let rootViewController = ___VARIABLE_rootClassName___(nibName: nil, bundle: nil)
let navigationController = UINavigationController(rootViewController: rootViewController)
window?.rootViewController = navigationController
window?.makeKeyAndVisible()</string>
						</dict>
						<key>RequiredOptions</key>
						<dict>
							<key>languageChoice</key>
							<string>Swift</string>
						</dict>
					</dict>
				</array>
			</dict>
		</dict>
	</array>
	<key>SortOrder</key>
	<integer>1</integer>
</dict>
</plist>
